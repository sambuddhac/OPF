package OPF;

message Generator {
  // minimize sum(alpha*p_t^2 + beta*p_t)
  // subject to
  //    |p_{t+1} - p_t| <= slew
  //    pmin <= p_t <= pmax
  required double alpha = 1;
  required double beta = 2;
  required double pmax = 3;
  required double pmin = 4;
  required double slew = 5;
}

message FixedLoad {
  // minimize (0)
  // subject to
  //    p_t = L_t
  repeated double L = 1;
}

message Battery {
  // minimize (0)
  // subject to
  //    q_0 = q0
  //    q_f = qf
  //    0 <= q_t <= Q
  //    |p_t| <= P
  //    q_{t+1} = q_t + p_t
  //
  // (q_t is a private variable)
  required double q0 = 1;
  required double qf = 2;
  required double Q = 3;
  required double P = 4;
}

message DeferrableLoad {
  // minimize (0)
  // subject to
  //    sum_{t=Tstart}^Tend P_t >= E
  //    pmin <= p_t <= pmax
  
  required uint32 Tstart = 1;
  required uint32 Tend = 2;
  required double E = 3;
  required double pmin = 4;
  required double pmax = 5;
}

message CurtailableLoad {
    // minimize ( gamma*(p_t - pdes)_+)
    
    required double gamma = 1;
    required double pdes = 2;   // negative
}

// protobuffer for dynamic dispatch
message Bus {
  // add a filename
	required string name = 1;
	
	message Point {
    required double x = 1;
    required double y = 2;
  }
	
	required Point location = 2;
	
	enum BusType {
	  DIS = 0;  // distribution node
	  GEN = 1;  // generator
	  FIX = 2;  // fixed load
	  BAT = 3;  // battery
	  DEF = 4;  // deferrable load
	  CUR = 5;  // curtailable load
	}
	
  // repeated double p = 3;  // power profile
  // repeated double u = 4;  // price profile
	
	required BusType type = 3 [default = DIS];
	// distribution nodes will have no cost and no constraints
	//
	
	// generator has following cost
	optional Generator genCost = 4;
	
	// fixed load has following cost
	optional FixedLoad loadCost = 5;
	
	// battery has following cost
	optional Battery batCost = 6;
	
	// deferrable load has following cost
	optional DeferrableLoad defCost = 7;
	
	optional CurtailableLoad curCost = 8;
}

message Line {
  // add a filename to each device
	required string name = 1;
	enum LineType {
		DC = 0;  // DC line
		AC = 1;  // AC line
	}
	required LineType type = 2 [default = DC];

	optional double g = 3;
	optional double b = 4;
	optional double M = 5;
  // repeated double p1 = 5;
  // repeated double p2 = 6;
  // repeated double u1 = 7;
  // repeated double u2 = 8;
}

message Network {
  repeated Bus bus = 1;
  repeated Line line = 2;
  
  message Pair {
    required uint32 bus1 = 1;
    required uint32 bus2 = 2;
  }
  
  repeated Pair map = 3;
  // map(i) = (j,k), bus(j), bus(k) are endpoints of line(i)
}

// protobuf for data storage
message Device {
  message Terminal {
    repeated double p = 1;
    repeated double u = 2;
    repeated double theta =3;
    repeated double v = 4;
  }
  repeated Terminal terminals = 1;
}
